# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FuncWind.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QTableWidgetItem, QDialog, QDialogButtonBox, QVBoxLayout, QLabel, QMessageBox


class Ui_FuncWind(object):
    def setupUi(self, FuncWind, _config):
        FuncWind.setObjectName("FuncWind")
        FuncWind.resize(1080, 583)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/logo_vert.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        FuncWind.setWindowIcon(icon)
        FuncWind.setStyleSheet("QPushButton {\n"
"    background-color: #4CAF50;\n"
"    border: none;\n"
"    color: #fff;\n"
"    padding: 14px;\n"
"    text-align: center;\n"
"    text-decoration: none;\n"
"    display: inline-block;\n"
"    font-size: 12px;\n"
"    margin: 4px 2px;\n"
"    border-radius: 12px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #3e8e41\n"
"}")
        self.centralwidget = QtWidgets.QWidget(FuncWind)
        self.centralwidget.setObjectName("centralwidget")
        self.AddNoteTable = QtWidgets.QTableWidget(self.centralwidget)
        self.AddNoteTable.setGeometry(QtCore.QRect(455, 50, 611, 401))
        self.AddNoteTable.setObjectName("AddNoteTable")
        self.AddNoteTable.setColumnCount(0)
        self.AddNoteTable.setRowCount(0)
        self.OriginalPhotoTable = QtWidgets.QTableWidget(self.centralwidget)
        self.OriginalPhotoTable.setGeometry(QtCore.QRect(15, 50, 431, 401))
        self.OriginalPhotoTable.setObjectName("OriginalPhotoTable")
        self.OriginalPhotoTable.setColumnCount(0)
        self.OriginalPhotoTable.setRowCount(0)
        self.origLabel = QtWidgets.QLabel(self.centralwidget)
        self.origLabel.setGeometry(QtCore.QRect(20, 20, 181, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.origLabel.setFont(font)
        self.origLabel.setObjectName("origLabel")
        self.origLabel_2 = QtWidgets.QLabel(self.centralwidget)
        self.origLabel_2.setGeometry(QtCore.QRect(460, 20, 181, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.origLabel_2.setFont(font)
        self.origLabel_2.setObjectName("origLabel_2")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 460, 1061, 116))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.CreateMarkup = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.CreateMarkup.setFont(font)
        self.CreateMarkup.setObjectName("CreateMarkup")
        self.horizontalLayout_2.addWidget(self.CreateMarkup)
        self.ChangeMarkup = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.ChangeMarkup.setFont(font)
        self.ChangeMarkup.setObjectName("ChangeMarkup")
        self.horizontalLayout_2.addWidget(self.ChangeMarkup)
        self.DeleteMarkup = QtWidgets.QPushButton(self.layoutWidget,
                                                  clicked=lambda: self.OpenDeleteDialog(self.AddNoteTable.item(self.AddNoteTable.currentRow(), 1).text(), "разметку"))
        """self.DeleteMarkup = QtWidgets.QPushButton(self.layoutWidget,
                                                  clicked=lambda: self.DeleteFromDB(
                                                      self.AddNoteTable.item(self.AddNoteTable.currentRow(), 0).text(),
                                                      "markup",
                                                      self.CreateDBConnection(_config),
                                                      self.AddNoteTable.currentRow() - 1
                                                  ))"""
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.DeleteMarkup.setFont(font)
        self.DeleteMarkup.setObjectName("DeleteMarkup")
        self.horizontalLayout_2.addWidget(self.DeleteMarkup)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.CreatePhoto = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.CreatePhoto.setFont(font)
        self.CreatePhoto.setObjectName("CreatePhoto")
        self.horizontalLayout.addWidget(self.CreatePhoto)
        self.ChangePhoto = QtWidgets.QPushButton(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.ChangePhoto.setFont(font)
        self.ChangePhoto.setObjectName("ChangePhoto")
        self.horizontalLayout.addWidget(self.ChangePhoto)
        self.DeletePhoto = QtWidgets.QPushButton(self.layoutWidget,
                                                 clicked=lambda: self.OpenDeleteDialog(self.OriginalPhotoTable.item(self.OriginalPhotoTable.currentRow(), 1).text(), "фото"))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.DeletePhoto.setFont(font)
        self.DeletePhoto.setObjectName("DeletePhoto")
        self.horizontalLayout.addWidget(self.DeletePhoto)
        self.verticalLayout.addLayout(self.horizontalLayout)
        FuncWind.setCentralWidget(self.centralwidget)

        self.retranslateUi(FuncWind)
        QtCore.QMetaObject.connectSlotsByName(FuncWind)


    def DeleteFromDB(self, id, table, conn, new_id=0):
        cur = conn.cursor()
        id = int(id)
        if table == 'sources':
            col = 'image_id'
        else:
            col = 'markup_id'
        cur.execute(f"delete from {table} where {col} = {id}")
        conn.commit()
        self.UpdateTables(conn)
        if table == 'sources' and new_id >= 0:
            self.OriginalPhotoTable.selectRow(id - 1)
        if table == 'markup' and new_id >= 0:
            self.AddNoteTable.selectRow(new_id)
        conn.close()


    def OpenDeleteDialog(self, path, mode):
        dlg = QMessageBox()
        dlg.setIcon(QMessageBox.Icon.Question)
        dlg.addButton(QMessageBox.StandardButton.Cancel)
        dlg.addButton(QMessageBox.StandardButton.Apply)
        dlg.setWindowTitle("Внимание!")
        dlg.setText(f'Вы действительно хотите удалить {mode}\n"{path}"?')
        dlg.exec()


    def UpdateTables(self, conn=None):
        if conn:
            cur = conn.cursor()
            cur.execute("select * from main_view")

            self.AddNoteTable.setColumnCount(0)
            self.AddNoteTable.setRowCount(0)
            self.OriginalPhotoTable.setColumnCount(0)
            self.OriginalPhotoTable.setRowCount(0)

            self.AddNoteTable.setColumnCount(6)
            self.AddNoteTable.setHorizontalHeaderLabels(
                ['markup_id', 'Файл разметки', 'Оригинальный файл', 'Тип', 'Регион', 'Время съёмки'])
            for row in cur:
                rows = self.AddNoteTable.rowCount()
                self.AddNoteTable.setRowCount(rows + 1)
                self.AddNoteTable.setItem(rows, 0, QTableWidgetItem(str(row[0])))
                self.AddNoteTable.setItem(rows, 1, QTableWidgetItem(row[1]))
                self.AddNoteTable.setItem(rows, 2, QTableWidgetItem(row[2]))
                self.AddNoteTable.setItem(rows, 3, QTableWidgetItem(row[3]))
                self.AddNoteTable.setItem(rows, 4, QTableWidgetItem(row[4]))
                self.AddNoteTable.setItem(rows, 5, QTableWidgetItem(str(row[5])))
            self.AddNoteTable.resizeColumnsToContents()
            if self.AddNoteTable.rowCount() >= 1:
                self.AddNoteTable.selectRow(0)
            self.AddNoteTable.setColumnHidden(0, True)

            cur.execute("select * from sources")
            self.OriginalPhotoTable.setColumnCount(4)
            self.OriginalPhotoTable.setHorizontalHeaderLabels(
                ['image_id', 'Путь фото', 'Регион', 'Время съёмки'])
            for row in cur:
                rows = self.OriginalPhotoTable.rowCount()
                self.OriginalPhotoTable.setRowCount(rows + 1)
                self.OriginalPhotoTable.setItem(rows, 0, QTableWidgetItem(str(row[0])))
                self.OriginalPhotoTable.setItem(rows, 1, QTableWidgetItem(row[3]))
                self.OriginalPhotoTable.setItem(rows, 2, QTableWidgetItem(row[1]))
                self.OriginalPhotoTable.setItem(rows, 3, QTableWidgetItem(str(row[2])))
            self.OriginalPhotoTable.resizeColumnsToContents()
            if self.OriginalPhotoTable.rowCount() >= 1:
                self.OriginalPhotoTable.selectRow(0)
            self.OriginalPhotoTable.setColumnHidden(0, True)

            cur.close()
            conn.close()
            print("[INFO] Connection has been closed")
        else:
            print("[ERROR] The tables has not been updated as there is no connection")


    def CreateDBConnection(self, config):
        try:
            import psycopg2
            conn = psycopg2.connect(database=config["database"], user=config["user"],
                                    password=config["password"], host=config["host"], port=int(config["port"]))
            print("[INFO] Connection to the database was successful!")
            return conn
        except Exception as _ex:
            print(f"[INFO] Error while connection with PostgreSQL - {_ex}")


    def retranslateUi(self, FuncWind):
        _translate = QtCore.QCoreApplication.translate
        FuncWind.setWindowTitle(_translate("FuncWind", "Работа с данными"))
        self.origLabel.setText(_translate("FuncWind", "Оригинальные снимки:"))
        self.origLabel_2.setText(_translate("FuncWind", "Разметка снимков:"))
        self.CreateMarkup.setText(_translate("FuncWind", "Добавить разметку"))
        self.ChangeMarkup.setText(_translate("FuncWind", "Изменить разметку"))
        self.DeleteMarkup.setText(_translate("FuncWind", "Удалить разметку из базы"))
        self.CreatePhoto.setText(_translate("FuncWind", "Добавить оригинальный снимок"))
        self.ChangePhoto.setText(_translate("FuncWind", "Изменить оригинальный снимок"))
        self.DeletePhoto.setText(_translate("FuncWind", "Удалить оригинальный снимок из базы"))


"""class CustomDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)

        self.setWindowTitle("HELLO!")

        QBtn = QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel

        self.buttonBox = QDialogButtonBox(QBtn)
        #self.buttonBox.accepted.connect(self.accept)
        #self.buttonBox.rejected.connect(self.reject)
        self.buttonBox.accepted(self.accept)
        self.buttonBox.rejected(self.reject)

        self.layout = QVBoxLayout()
        message = QLabel("Уверены, что хотите удалить ?")
        self.layout.addWidget(message)
        self.layout.addWidget(self.buttonBox)
        self.setLayout(self.layout)"""
